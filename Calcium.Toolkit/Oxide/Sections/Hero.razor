@using Calcium.Core.Models;
@inject HttpClient Http

@if (Parameters != null)
{
    <section @attributes=AdditionalAttributes class="hero">
        @foreach (var item in ImageSources)
        {
            <Calcium.Toolkit.Oxide.Components.AnimatedEmoji Path="@item.URL" style=@PositionEmojiInStyleTag(item) data-emoji-size="xxl" data-animate="zoom-in-zoom-out" />
        }

        <div class="hero-body">
            @if (!string.IsNullOrEmpty(Parameters.Title))
            {
                <h1 class="title contrast">@Parameters.Title</h1>
            }
            @foreach (var line in Parameters.Subtitles)
            {
                <h3 class="contrast">@line</h3>
            }

            @if (Parameters.CTA != null)
            {
                <a class="button secondary-400 mt-3" href="@Parameters.CTA.URL">@Parameters.CTA.Name</a>
            }
        </div>
    </section>
}

@code {
    [Parameter]
    public Sections.Hero? Parameters { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private record ImageSource(string URL, Tuple<int, int> xy)
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        public int X { get; set; } = xy.Item1;
        public int Y { get; set; } = xy.Item2;
        public bool Loaded { get; set; } = false;
    }

    private List<string> _emojis =
    [
    "Smilies/Smiling Face with Heart-Eyes",
    "Smilies/Zany Face",
    "Smilies/Nerd Face",
    "Smilies/Face with Spiral Eyes",
    "Smilies/Face with Crossed-Out Eyes",
    "Smilies/Disguised Face",
    "Smilies/Smiling Face",
    "Smilies/Face with Tears of Joy",
    "Smilies/Rolling on the Floor Laughing"
    ];

    private List<ImageSource> ImageSources = [];

    private Tuple<int, int> GenerateRandomPositionWithoutCollision(Tuple<int, int> XLimits, Tuple<int, int> YLimits)
    {
        var rnd = new Random();

        var X = rnd.Next(XLimits.Item1, XLimits.Item2);
        var Y = rnd.Next(YLimits.Item1, YLimits.Item2);

        return new(X, Y);
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     var rnd = new Random();

    //     for (int i = 0; i < 2; i++)
    //     {
    //         // Add emoji to Quadrant 1:1
    //         // ImageSources.Add(new ($"{_emojis[rnd.Next(0,8)]}.png") { X = rnd.Next(5, 35), Y = rnd.Next(5, 35) });
    //         ImageSources.Add(new ($"{_emojis[rnd.Next(0, 8)]}.png", GenerateRandomPositionWithoutCollision(new(10, 36), new(5, 36))));

    //         // Add emoji to Quadrant 2:1
    //         // ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png") { X = rnd.Next(65, 95), Y = rnd.Next(5, 35) });
    //         ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png", GenerateRandomPositionWithoutCollision(new(65, 91), new(5, 36))));

    //         // Add emoji to Quadrant 1:2
    //         // ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png") { X = rnd.Next(5, 35), Y = rnd.Next(65, 85) });
    //         ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png", GenerateRandomPositionWithoutCollision(new(10, 36), new(65, 81))));

    //         // Add emoji to Quadrant 2:2
    //         // ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png") { X = rnd.Next(65, 95), Y = rnd.Next(65, 85) });
    //         ImageSources.Add(new($"{_emojis[rnd.Next(0, 8)]}.png", GenerateRandomPositionWithoutCollision(new(65, 91), new(65, 81))));
    //     }

    //     await base.OnInitializedAsync();
    // }

    private string PositionEmojiInStyleTag(ImageSource item)
    {
        return $"position:absolute;left:{item.X}%;top:{item.Y}%;";
    }
}