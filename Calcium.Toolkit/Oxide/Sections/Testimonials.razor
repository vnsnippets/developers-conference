@using Calcium.Core
@using Calcium.Core.Schema.Widgets
@using Calcium.Toolkit.Oxide.Layouts
@using Calcium.Toolkit.Oxide.Components
@using Microsoft.JSInterop

@inject IJSRuntime JS

<div class="testimonials" data-icon-margin="@Items.Any((e) => !string.IsNullOrEmpty(e.Icon))">
    @foreach (var item in Items)
    {
        <a href=@item.Source target="_blank" @attributes=AdditionalAttributes data-active="@(item.Id == _activeId)">
            <blockquote class="testimonial">
                @if (!string.IsNullOrEmpty(item.Icon))
                {
                    <span class="icon">
                        <Emoji Path="@item.Icon" Name="Testimonial Icon" data-emoji-size="65" />
                    </span>
                }

                <p class="quote">@item.Quote</p>

                <div class="author">
                    @*    @if (!string.IsNullOrEmpty(item.Image))
                    {
                        <img class="image" src=@item.Image alt="Author's Image" />
                    } *@

                    <div class="details">
                        <h6>@item.Author</h6>
                        <small>@item.Credentials</small>
                    </div>
                </div>
            </blockquote>
        </a>
    }

    <div class="testimonials-pagination"></div>
</div>

@code {
    [Parameter]
    public List<Testimonial> Items { get; set; } = [];

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private System.Timers.Timer _timer = new System.Timers.Timer(1000);

    private Guid _activeId;

    protected override async Task OnInitializedAsync()
    {
        if (!Items.Any()) return;

        _activeId = Items[1].Id;

        if (Items.Count > 1)
        {
            _timer.Elapsed += (sender, eventArgs) => SwitchTestimonial();
            _timer.Start();
        }

        await base.OnInitializedAsync();
    }

    private void SwitchTestimonial()
    {
        
    }
}
