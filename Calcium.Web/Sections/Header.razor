@using System.Text.RegularExpressions
@using System.Linq
@using static Calcium.Core.Models.Lists

<section @attributes=AdditionalAttributes class="hero">
    <div class="hero-body">
        <h1 class="title contrast">
            @foreach(var item in Title) {
                <span class="inline-block">
                @foreach(var token in SplitTokensInString(item))
                {
                    @RenderFragmentAsStringOrImage(token);
                }
                </span>
            }
        </h1>

        @foreach (var line in Caption)
        {
            <h3 class="contrast">@line</h3>
        }
@* 
        @if (CTA != null)
        {
            <a class="button secondary-500 mt-3" href="@CTA.URL">@CTA.Name</a>
        } *@
    </div>
</section>

@code {
    /// <summary>
    /// Value can contain tokens as #TOKEN# which represents an emoji name to replace a character
    /// </summary>
    [Parameter]
    public string[] Title { get; set; } = [];

    /// <summary>
    /// Value can contain tokens as #TOKEN# which represents an emoji name to replace a character
    /// </summary>
    [Parameter]
    public string[] Caption { get; set; } = [];

    [Parameter]
    public Link? CTA { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    // private RenderFragment[] RenderTokensInString(string htmlString)
    // {
    //     var pattern = @"#(.*?)#";
    //     var matches = Regex.Split(htmlString, pattern);

    //     RenderFragment[] fragments = [];

    //     Array.ForEach(matches, (token) =>
    //     {
    //         var tokenPattern = @"{(.*?)}";
    //         var match = Regex.Match(token, tokenPattern);

    //         if (match.Success) fragments.Append(@<span class="emoji-inline"><img src=$"{_baseURL}/{match.Groups[0]}.png" alt="Inline Emoji" /></span>);
    //         else fragments.Append(@<span class="inline-text">token</span>);
    //     });

    //     return fragments;
    // }

    private string _baseURL = Calcium.Core.Site.ResourcesBaseURL;


    private List<string> SplitTokensInString(string htmlString)
    {
        var pattern = @"#(.*?)#";
        var matches = Regex.Split(htmlString, pattern);

        return new List<string>(matches);
    }

    private RenderFragment RenderFragmentAsStringOrImage(string token)
    {
        var tokenPattern = @"{(.*?)}";
        var match = Regex.Match(token, tokenPattern);

        var subtokens = match.Groups[1].ToString().Split("|");
        var value = subtokens[0].Trim();
        var alt = (subtokens.Count() > 1) ? subtokens[1].Trim() : string.Empty;

        if (match.Success) return @<span class="emoji-inline"><img src="@(_baseURL)/@(value).png" alt="@alt" /></span>  ;
        else return @<span class="inline-text">@token</span>;
    }
}